{"version":3,"sources":["app/logo.svg","menu/menu.js","service/rss-service.js","loader/loader.js","content-card/content-card.js","article/article.js","content/content.js","rss-title/rss-title.js","article-img/article-img.js","app/app.js","index.js"],"names":["module","exports","__webpack_require__","p","Menu","_this","this","props","categoryItem","map","item","className","status","react_default","a","createElement","key","idCategory","Link","to","id_category","onClick","onMenuActive","name","Fragment","React","Component","rssService","urlCategory","url","fetch","res","text","tmp777","domParser","DOMParser","resXml","parseFromString","Error","concat","body","getRss","rssXml","rssMajor","id","querySelectorAll","forEach","title","textContent","match","urlImg","getElementsByTagName","innerHTML","moreInfo","length","innerText","dateNews","link","nextSibling","data","category","Object","toConsumableArray","Loader","withRouter","Cards","rssSelect","console","log","onOpenArticle","src","alt","loading","loader_loader","location","pathname","Article","Content","_this$props","page_article","article_article","content_card_content_card","RssTitle","rssTitleItem","rssLive","dateNewsFormated","onTimeConverter","react_custom_scroll_default","heightRelativeToParent","ArticleImg","App","RssService","state","test","timeConverter","string_timestamp","UNIX_timestamp","Date","parse","isNaN","month","getMonth","getDate","getHours","getMinutes","getSeconds","MenuActive","setState","getRssParse","then","idx","findIndex","el","newArr","i","updateRssLive","OpenArticle","_this2","BrowserRouter","logo","menu_Menu","rss_title_RssTitle","Route","path","render","content_Content","exact","document","documentElement","clientWidth","article_img_article_img","ReactDOM","app_App","getElementById"],"mappings":"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","file":"static/js/main.947175ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6128f77e.svg\";","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport './menu.css'\r\n\r\nexport default class Menu extends React.Component{\r\n   \r\n   \r\n   \r\n   render(){\r\n      const menuItem = this.props.categoryItem;  \r\n\r\n\r\n      // формируем массив элементов из массива с названиями \r\n      const Menu = menuItem.map((item) => {\r\n         let className='menu__item';\r\n         // проверяем активен пункт меню или нет \r\n         if(item.status){\r\n            className += ' menu__item_active'\r\n         }\r\n         return(\r\n            <li key={item.idCategory} className={className}>               \r\n               <Link to={item.idCategory} className='menu__a' \r\n                  id_category = {item.idCategory}\r\n                  onClick={() => this.props.onMenuActive(item.idCategory) }> \r\n                        {item.name}\r\n               </Link> \r\n            </li>\r\n         ) \r\n      });\r\n\r\n      return(\r\n         <React.Fragment>\r\n            <ul className='menu'>\r\n               {Menu}               \r\n            </ul>\r\n         </React.Fragment>\r\n      )\r\n   }\r\n   \r\n   \r\n}","export default class rssService  {\r\n\r\n   async getRss(urlCategory) {      \r\n      //const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n      const proxyurl = \"https://cors.io/?\";\r\n      const url = `https://112.ua/rss${urlCategory}/index.rss`; // site that doesnt send Access-Control-*\r\n      let resXml;\r\n      const res = await fetch(proxyurl + url);\r\n      const tmp777 = await res.text();\r\n      if(tmp777){\r\n         var domParser = new DOMParser()\r\n         resXml = domParser.parseFromString(tmp777, 'text/html');         \r\n      }else{\r\n         throw new Error(`CCCould not fetch ${url}, received ${res.status}`)\r\n      }\r\n      return resXml.body;\r\n   }\r\n// begin getRssMajor получаем XML данные и парсим их в массив\r\n   async getRssParse(urlCategory) {\r\n      // проверяем полученый url, если он есть то добавляем /\r\n      urlCategory ? urlCategory ='/'+urlCategory : urlCategory ='';\r\n      const rssXml = await this.getRss(urlCategory);\r\n      let rssMajor = [];\r\n      let id = 0;\r\n      // просматриваем каждый item \r\n      rssXml.querySelectorAll('item').forEach((item) => {           \r\n         // регулярное выражение для получение названия новости\r\n         const titleRegExp = /<!\\[CDATA\\[([\\s\\S]*?)\\]]>/;\r\n         // item.textContent - что б получить коментарий \r\n         let title = item.textContent.match(titleRegExp)[1];\r\n         // регулярное выражение для получение url картинки\r\n         const urlImgRegExp = /http[s]?[^?$|\"]+/;\r\n         // получаем url \r\n         let urlImg = item.getElementsByTagName('description')[0].innerHTML.match(urlImgRegExp)[0];\r\n         // регулярное выражение для получение moreInfo\r\n         const moreInfoRegExp = /^\\s+(.*)\\]]>/;\r\n         let moreInfo = '';\r\n         if(item.getElementsByTagName('description')[0].length){\r\n            moreInfo = item.getElementsByTagName('description')[0].innerText.match(moreInfoRegExp)[1];\r\n         }\r\n            \r\n         // регулярное выражение для получение id_category\r\n         //const idCategoryRegExp = /[^:'\\/]+\\/(\\w+)/;\r\n\r\n         const idCategoryRegExp = /.*\\/\\/+\\w+.ua\\/(\\S+)\\//;         \r\n         let idCategory = item.getElementsByTagName('guid')[0].innerText.match(idCategoryRegExp)[1];\r\n\r\n         let dateNews;\r\n         if(urlCategory === '/'){\r\n            dateNews = item.getElementsByTagName('pubDate')[0].innerText;\r\n         }else{\r\n            // регулярное выражение для получение dateNews\r\n            const moreInfoRegExp = /[0-9][^:]+\\S[^:]+/;\r\n            dateNews = item.getElementsByTagName('pubDate')[0].innerText.match(moreInfoRegExp)[0];            \r\n         }\r\n\r\n\r\n\r\n\r\n           \r\n         const idLinkRegExp = /\\/+(\\w+.*)\\/+(\\S+)/;          \r\n         let link = item.getElementsByTagName('link')[\"0\"].nextSibling.data.match(idLinkRegExp)[2];\r\n         /*if(Array.isArray(link)){\r\n            link = link[2];\r\n         }*/\r\n         let category = item.getElementsByTagName('category')[0].innerText;\r\n         // записываем в массив \r\n         rssMajor = [...rssMajor, {id: id++, \r\n                                 idCategory: idCategory, \r\n                                 title: title,\r\n                                 urlImg: urlImg, \r\n                                 moreInfo: moreInfo, \r\n                                 dateNews:dateNews, \r\n                                 category:category, \r\n                                 link: link}];\r\n\r\n      });                    \r\n      return rssMajor;\r\n   }\r\n// end getRssMajor   \r\n}\r\n\r\n\r\n/* пример получение данных \r\nconst tmp = new rssService();\r\n// ответ --> промис\r\nconst arrTmp = tmp.getRssMajor()\r\n   .then((res) => {\r\n      console.log(res);\r\n   }) ;\r\nconsole.log('требуемые данные ==>', arrTmp);\r\n\r\n*/","import React from 'react';\r\nimport './loader.css'\r\n\r\nconst Loader = () => {\r\n\r\n   return(\r\n      <div className=\"loader\"></div>\r\n   )\r\n}\r\n\r\nexport default Loader;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport './content-card.css'\r\nimport Loader from '../loader/loader'\r\nimport {Link, withRouter} from 'react-router-dom'\r\n\r\n\r\nconst  ContentCard = (props) =>{\r\n   let rssSelect = props.rssSelect;\r\n  \r\n\r\n\r\n\r\n   const Cards = rssSelect.map((item) => {\r\n      console.log('смотрим что получили:', item)\r\n      return(\r\n         //<div key={item.id} className='card'>\r\n         <Link to={`${item.idCategory}/${item.link}`} key={item.id} className='card' onClick = {(link) => props.onOpenArticle(item.link)}>\r\n            <img className='content-card__img' src={item.urlImg } alt=''/>\r\n            <div className='content-card_title'>{item.title }</div>\r\n         </Link>\r\n      )\r\n   });\r\n\r\n\r\n   // если идет загрузка показываем лоадер\r\n  if(props.loading){\r\n      return(\r\n         <Loader/>\r\n      )\r\n   };\r\n   console.log('адресная строка ==> ', props.location.pathname);\r\n   return(\r\n      \r\n      <React.Fragment>\r\n         {Cards}\r\n      </React.Fragment>\r\n      \r\n   );\r\n\r\n};\r\n\r\nexport default withRouter(ContentCard);","import React from 'react';\r\n\r\nimport './article.css'\r\n\r\nconst Article = (props) => {\r\n   const {rssSelect} = props;\r\n   console.log(rssSelect);\r\n   debugger;\r\n   return(\r\n      <div className='content-article'>\r\n         <div className='content-article-wrap-title'> \r\n            <p>\r\n               25 февр. 2019 09:17\r\n            </p>\r\n            <h1>\r\n               Захватчик самолета в Бангладеш угрожал игрушечным пистолетом\r\n            </h1>\r\n            <p className='content-article__details'>\r\n               Мужчина оказался психически неуравновешенным\r\n            </p>\r\n         </div>\r\n         \r\n         <p className='content-article__text'>\r\n         <img className='content-article__img' src=\"https://imgclf.112.ua/original/2019/02/25/378124.png\" alt=\"\"/>\r\n         В Бангладеше застреленный мужчина, который пытался захватить самолет, \r\n         угрожал игрушечным пистолетом. Об этом сообщает Reuters.  Мужчина \r\n         пытался пробраться в кабину пилотов, что бы угнать самолет. При этом \r\n         он грозился все подорвать и угрожал игрушечным пистолетом. Эту \r\n         информацию подтверждает местная полиция.  Также в полиции сообщили, \r\n         что мужчина был психически неуравновешенным. У него были проблемы с \r\n         женой, а также захватчик требовал поговорить с премьер-министром.  \r\n         Напомним, мужчина пронес на борт самолета  авиакомпании Biman Bangladesh\r\n         Airlines пистолет и утверждал, что имеет взрывчатку и подорвет самолет. \r\n         Все 142 пассажира, которые находились на борту, он взял в заложники.\r\n         Самолет совершил вынужденную посадку в международном аэропорту\r\n         Шах Аманат в Читтагонге. Пассажира пытались арестовать или заставить \r\n         сдаться, но он отказался, поэтому его застрелил армейский спецназ.\r\n         </p>\r\n      </div>\r\n\r\n   )\r\n}\r\n\r\nexport default Article;","import React from 'react';\r\n\r\nimport ContentCard from '../content-card/content-card'\r\nimport Article from '../article/article'\r\n\r\nimport './content.css'\r\n\r\n\r\nexport default class Content extends React.Component{\r\n   \r\n\r\n   render(){\r\n      const  {page_article, onOpenArticle, rssSelect, loading} = this.props;\r\n\r\n      return(\r\n         <div className='content'>\r\n            \r\n            {page_article ? <Article/> : <ContentCard rssSelect={rssSelect} \r\n                           loading={loading}\r\n                           onOpenArticle = {(link) => onOpenArticle(link)}/>}\r\n            \r\n         \r\n         </div>\r\n      )\r\n   }\r\n}","import React from 'react'\r\n\r\nimport './rss-title.css'\r\nimport CustomScroll from 'react-custom-scroll';\r\n\r\n\r\nexport default class RssTitle extends React.Component {\r\n\r\n\r\n   componentDidUpdate() {\r\n      console.log('componentDidUpdate == RssTitle');  \r\n      \r\n   }\r\n\r\n\r\n   render(){\r\n      \r\n      const {rssLive} = this.props;\r\n      const rssTitleItem = rssLive.map((item) => {\r\n         const dateNewsFormated = this.props.onTimeConverter(item.dateNews);\r\n\r\n         return(\r\n            <li key={item.id} className='rss-title-item'>\r\n               <div className='rss-title-item-detail'>\r\n                  <div  className='rss-title-item-detail__category'>\r\n                     {item.category}\r\n                  </div>\r\n                  <div className='rss-title-item-detail__date'>\r\n                     {dateNewsFormated}\r\n                  </div>\r\n               </div>\r\n               <p className='rss-title-item__header'>\r\n                  {item.title}\r\n               </p>\r\n            </li> \r\n         )\r\n      });\r\n      // если идет загрузка - ждем\r\n      if(this.props.loading){\r\n         return(\r\n            false\r\n         )\r\n      };\r\n      return(\r\n         <div className='rss-title'>\r\n            <CustomScroll heightRelativeToParent=\"100% \">\r\n               <ul className='rss-title-ul'>\r\n                  {rssTitleItem}      \r\n               </ul>         \r\n            </CustomScroll>\r\n         </div>\r\n         \r\n         \r\n      )  \r\n   }   \r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './article-img.css'\r\n\r\nconst ArticleImg = () => {\r\n\r\n   return(\r\n      <div className='article-img'>\r\n         какой то пробный текст  \r\n      </div>\r\n   )\r\n}\r\n\r\nexport default ArticleImg;\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\n\nimport './app.css';\nimport './rcs-custom-scroll.css'\nimport Menu from '../menu/menu';\nimport RssService from '../service/rss-service';\nimport Content from '../content/content';\nimport RssTitle from '../rss-title/rss-title'\nimport ArticleImg from '../article-img/article-img'\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom'\nimport logo from './logo.svg'\n\n\n\n\nexport default class App extends Component {\n\n   rssService = new RssService();\n\n   state = {\n      //  храним уникальные категории новостей*/\n      categoryItem: [\n         { name: 'Главные новости', status: false, idCategory: 'glavnye-novosti'},\n         { name: 'АТО', status: false, idCategory: 'ato'},         \n         { name: 'Политика', status: false, idCategory: 'politika'},\n         { name: 'Экономика', status: false, idCategory: 'ekonomika'},\n         { name: 'Общество', status: false, idCategory: 'obshchestvo'},\n         { name: 'ЧП', status: false, idCategory: 'avarii-chp'},\n         { name: 'Киев', status: false, idCategory: 'kiev'},\n         { name: 'Культура', status: false, idCategory: 'kultura'},\n         { name: 'Курьезы', status: false, idCategory: 'fun'},\n         { name: 'Спорт', status: false, idCategory: 'sport'}\n      ],\n      rssLive: [],\n      rssSelect: [], \n      \n      loading: true, \n      page_article: false,\n      test: '111'\n\n\n\n   }\n\n   // преобразовываем даты\n   timeConverter = (string_timestamp) => {\n      const UNIX_timestamp = Date.parse(string_timestamp); \n      // если перевод в UNIX формат не получился возвращаем что приняли\n      if(isNaN(UNIX_timestamp)){\n         return string_timestamp;\n      }\n      var a = new Date(UNIX_timestamp);\n      var months = ['янв','февр','март','апр','май','июн','июл','авг','сент','окт','нояб','декб'];\n      //var year = a.getFullYear();\n      var month = months[a.getMonth()];\n      var date = a.getDate();\n      var hour = a.getHours();\n      var min = a.getMinutes();\n      var sec = a.getSeconds();\n      //var time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\n      var time = date + ' ' + month + ' ' + hour + ':' + min + ':' + sec ;\n      return time;\n    }\n\n\n\n\n   // выделяем активный пункт меню \n   MenuActive = (idCategory) =>{\n      const {categoryItem } = this.state;\n      this.setState(() =>{\n         return{\n            //показываем лоадер\n            loading: true \n         }            \n      });\n      this.rssService.getRssParse(idCategory)\n         .then((res) => {            \n            this.setState(() =>{\n               return{\n                  rssSelect: res, \n                  //сообщаем об окончинии загрузки\n                  loading: false \n               }            \n            });\n         }); \n      \n      \n      console.log('получаем событие от пункта меню', idCategory);\n      this.setState(() => {\n         //получаем индекс элемента \n         const idx = categoryItem.findIndex((el) => el.idCategory === idCategory);\n         let newArr = [];\n         // формируем новый массив\n         for(let i = 0; i < categoryItem.length; i++){\n            if(i === idx){\n               newArr = [...newArr,\n                  {name: categoryItem[i].name,\n                     status: true, \n                     idCategory: categoryItem[i].idCategory}];\n            }else{\n               newArr = [...newArr,\n               {name: categoryItem[i].name,\n                  status: false, \n                  idCategory: categoryItem[i].idCategory}];\n            }\n         }         \n         return{\n            categoryItem: newArr\n         }\n      });\n   }\n\n   // обновляем ленту новостей\n   updateRssLive = () => {\n      this.rssService.getRssParse()\n         .then((res) => {            \n            this.setState(() =>{\n               return{\n                  rssLive: res,\n                  rssSelect: res, \n                  //сообщаем об окончинии загрузки\n                  loading: false \n               }            \n            });\n         });   \n   }\n\n   componentDidMount(){\n      this.updateRssLive();      \n   }\n   // открываем статью \n   OpenArticle = (link) => {\n      \n\n\n      console.log('абракадабра ',link);\n      \n   }\n\n\n   render(){\n      \n \n      \n\n\n      return(\n         <Router>\n            <React.Fragment>            \n               <div className='header'>\n                  <Link to='/'>\n                     <img className='logo' src={logo} alt=''/>\n                  </Link>\n               </div>\n               <Menu categoryItem = {this.state.categoryItem} \n                     onMenuActive = {this.MenuActive}/>\n               <div className='page'>\n                  <div className='page-wrap'>\n                     <RssTitle rssLive={this.state.rssLive} onTimeConverter={this.timeConverter}/>\n                     \n                     <Route path='/test' render = {() => {\n                        return <Content rssLive={this.state.rssLive} loading={this.state.loading} exact/>\n                     }}/>\n                     <Route exact path='/' render = {() => {\n                        return <Content rssSelect={this.state.rssLive} \n                                    loading={this.state.loading}\n                                    onOpenArticle = {this.OpenArticle}/>\n                     }}/>\n                     <Route path='/:id' render = {() => {\n                        return <Content rssSelect={this.state.rssSelect} \n                                    loading={this.state.loading}\n                                    onOpenArticle = {this.OpenArticle}/>\n\n                          \n                     }}/>\n                     \n                     {document.documentElement.clientWidth > 1450 ? <ArticleImg/> : null}\n                     \n                     \n                     \n                  </div>               \n               </div>                  \n            </React.Fragment>  \n         </Router>\n                \n      );      \n   }  \n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom'\n\n\nimport App from '../src/app/app'\nimport './index.css'\n\nReactDOM.render(<App/>, \n      document.getElementById('root'));\n\n\n\n/*const tmp = new rssService();\n\n// ответ --> промис\nconst arrTmp = tmp.getRssMajor()\n   .then((res) => {\n      console.log(res);\n   }) ;\nconsole.log('требуемые данные ==>', arrTmp);\n */\n   \n\n\n\n\n\n\n\n"],"sourceRoot":""}